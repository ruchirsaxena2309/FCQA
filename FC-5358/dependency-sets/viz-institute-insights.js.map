{"version":3,"file":"viz-institute-insights.js","sources":["../../dependency-sets/viz-institute-insights/components/super-view-more-charts/view-more-charts-hlp.js","../../dependency-sets/viz-institute-insights/components/super-sparkline-status-card/sparkline-status-card.js","../../dependency-sets/viz-institute-insights/components/super-faded-trends-list/faded-trends-list.js","../../dependency-sets/viz-institute-insights/components/super-view-more-charts/view-more-charts.js","../../dependency-sets/viz-institute-insights/components/super-view-more-trends/view-more-trends-hlp.js","../../dependency-sets/viz-institute-insights/components/super-view-more-trends/view-more-trends.js","../../dependency-sets/viz-institute-insights/components/super-view-more-trends-mashup/view-more-trends-mashup-hlp.js","../../dependency-sets/viz-institute-insights/components/super-view-more-trends-mashup/view-more-trends-mashup.js","../../dependency-sets/viz-institute-insights/helpers/ssInstituteInsightsHlp/institute-insights.js","../../src/config/base-component.js"],"sourcesContent":["// #--------------------------------------# //\r\n// #---- Helper (ssViewMoreChartsHlp) ----# //\r\n\r\n/*@ngInject*/\r\nfunction ssViewMoreChartsHlp($log, ssArrayHlp, ssMathHlp, ssInstituteInsightsHlp, ssHighchartsFactoryHlp, ssObjectHlp, moment) {\r\n\r\n\treturn{\r\n\t\tcreateBottomChartContainer\r\n\t};\r\n\r\n\tfunction createBottomChartContainer(legendMapping, apiResults, viewMoreTrendsOptions){\r\n\t\tconst {metricIsPercent, benchmarkTitles, yTitle, sortBySize, noDatesSeriesOverride, apiMergedDataOverride} = viewMoreTrendsOptions;\r\n\t\tlet {highchartType} = viewMoreTrendsOptions;\r\n\t\tconst seriesConfig = {\r\n\t\t\tcurrentIsoDate: moment().toISOString(),\r\n\t\t};\r\n\r\n\t\tif(!highchartType){ highchartType = 'column';}\r\n\r\n\t\tlet genericSeriesArr;\r\n\t\tif(noDatesSeriesOverride){\r\n\t\t\tgenericSeriesArr = ssInstituteInsightsHlp.getSparkChartSeriesWithCustomXAxisCategories(noDatesSeriesOverride, legendMapping, apiResults, seriesConfig);\r\n\t\t} else{\r\n\t\t\tgenericSeriesArr = ssInstituteInsightsHlp.toGenericHighchartSeries(legendMapping, apiResults, seriesConfig);\r\n\t\t}\r\n\r\n\t\tconst xAxisWithCategories = {\r\n\t\t\tcategories : noDatesSeriesOverride ? noDatesSeriesOverride.xAxisCategories : ssInstituteInsightsHlp.getXCategoriesFromResponse(apiResults)\r\n\t\t};\r\n\r\n\t\tlet seriesOfCharts;\r\n\r\n\t\tif(apiMergedDataOverride != null){\r\n\t\t\tseriesOfCharts = overrideMergedDataWithOtherApi();\r\n\t\t} else{\r\n\t\t\tseriesOfCharts = genericSeriesArr.map((elem) => {\r\n\t\t\t\tconst aSeriesElem = ssObjectHlp.deepCopy(elem);\r\n\t\t\t\taSeriesElem.type = highchartType;\r\n\t\t\t\tif(metricIsPercent){\r\n\t\t\t\t\t// Do the averaging of the data here for performance (ie. since you're already in a loop)\r\n\t\t\t\t\taSeriesElem.mergedData = aSeriesElem.data ? averageMonthsWithData(aSeriesElem.data) : 0;\r\n\t\t\t\t} else{\r\n\t\t\t\t\taSeriesElem.mergedData = aSeriesElem.data ? ssMathHlp.sum(nullToZero(aSeriesElem.data)) : 0;\r\n\t\t\t\t}\r\n\t\t\t\treturn aSeriesElem;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tfunction getMaxDataPoint(aSeriesArr){\r\n\t\t\treturn aSeriesArr.reduce(function(runningMaxNum, currentSeries){\r\n\t\t\t\tconst largestNumInDataArray = Math.max(...currentSeries.data);\r\n\t\t\t\tif(largestNumInDataArray > runningMaxNum){\r\n\t\t\t\t\treturn largestNumInDataArray;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn runningMaxNum;\r\n\t\t\t\t}\r\n\t\t\t},0);\r\n\t\t}\r\n\r\n\t\tfunction averageMonthsWithData(seriesData){\r\n\t\t\tconst dataToUse = seriesData.filter( percent => {\r\n\t\t\t\treturn (percent != null);\r\n\t\t\t});\r\n\t\t\t// ssMathHlp.average pukes if you send it an empty array\r\n\t\t\tif(dataToUse.length){\r\n\t\t\t\treturn ssMathHlp.average(dataToUse);\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// for each row if category name exists in api use that, if not use 0\r\n\t\tfunction overrideMergedDataWithOtherApi(){\r\n\t\t\tconst mergedDataSeriesArr = ssInstituteInsightsHlp.toGenericHighchartSeries(legendMapping, apiMergedDataOverride, seriesConfig);\r\n\t\t\treturn genericSeriesArr.map((rowChart) => {\r\n\t\t\t\tconst aSeriesElem = ssObjectHlp.deepCopy(rowChart);\r\n\t\t\t\taSeriesElem.type = highchartType;\r\n\t\t\t\taSeriesElem.mergedData = 0;\r\n\t\t\t\tmergedDataSeriesArr.forEach( (rowStat) => {\r\n\t\t\t\t\tif(rowStat.data && rowStat.name === rowChart.name){ //If same category\r\n\t\t\t\t\t\tif(rowStat.stack === rowChart.stack){ // If same org\r\n\t\t\t\t\t\t\taSeriesElem.mergedData = rowStat.data[0];\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn aSeriesElem;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tfunction sortByLegendThenPopulate(aSeriesArray, shouldSortBySize){\r\n\r\n\t\t\t// Create a hashmap, so the full list of series elements can be chunked into subset\r\n\t\t\tconst byLegendName = 'name';\r\n\t\t\tconst legendToSeriesHashMap = ssArrayHlp.groupBy(aSeriesArray, byLegendName);\r\n\r\n\t\t\tconst legendArray = ssInstituteInsightsHlp.getOrderedLegendNames(legendMapping);\r\n\t\t\t// Order the subsets by the legendArray\r\n\t\t\t// Also, populate it with other helper attributes\r\n\t\t\tconst chartContainers = legendArray.map((aLegendTitle, index, thisArray) => {\r\n\t\t\t\tconst seriesSubset = legendToSeriesHashMap[aLegendTitle];\r\n\t\t\t\tif(!seriesSubset){\r\n\t\t\t\t\t$log.error('One of the requested legend items had no corresponding data in the input: ' + aLegendTitle);\r\n\t\t\t\t\treturn; // short-circuit so you can filter out nulls\r\n\t\t\t\t}\r\n\t\t\t\tconst primary = ssArrayHlp.findWhere(seriesSubset, { stack: benchmarkTitles[0] });\r\n\t\t\t\tconst comparison = ssArrayHlp.findWhere(seriesSubset, { stack: benchmarkTitles[1] });\r\n\r\n\t\t\t\tconst skeletonOptions = {\r\n\t\t\t\t\theight: 210,\r\n\t\t\t\t\tlegendIsVisible: false,\r\n\t\t\t\t\tnoLowerMargin: true,\r\n\t\t\t\t\tyTitle: yTitle,\r\n\t\t\t\t\tisPercentage: metricIsPercent\r\n\t\t\t\t};\r\n\t\t\t\tif(metricIsPercent){\r\n\t\t\t\t\tskeletonOptions.tickPositioner = ssHighchartsFactoryHlp.tickPositioners.percentageBy(20);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tskeletonOptions.maxY = getMaxDataPoint(genericSeriesArr);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst unpopulatedListConfig = ssHighchartsFactoryHlp.getBasicHighchartStructure(highchartType, skeletonOptions);\r\n\t\t\t\tconst highchartConfig = Object.assign({}, unpopulatedListConfig, {\r\n\t\t\t\t\tseries : seriesSubset\r\n\t\t\t\t});\r\n\t\t\t\thighchartConfig.xAxis = xAxisWithCategories;\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tprimary,\r\n\t\t\t\t\tcomparison,\r\n\t\t\t\t\thighchartConfig\r\n\t\t\t\t};\r\n\t\t\t}).filter(value => !!value);\r\n\r\n\t\t\tif(shouldSortBySize){\r\n\t\t\t\t// Sort from Largest to Smallest\r\n\t\t\t\tchartContainers.sort((a, b) => {\r\n\t\t\t\t\t// By Largest\r\n\t\t\t\t\tif(!a || !a.primary || a.primary.mergedData == null ||\r\n\t\t\t\t\t\t!b || !b.primary || b.primary.mergedData == null){\r\n\t\t\t\t\t\t$log.error('couldn\\'t sort because mergedData was missing');\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn b.primary.mergedData - a.primary.mergedData;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\r\n\t\t\treturn chartContainers;\r\n\t\t}\r\n\r\n\t\tfunction nullToZero(anArray){\r\n\t\t\treturn anArray.slice().map(function(aValueInTheArray){\r\n\t\t\t\tif(aValueInTheArray === null){\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn aValueInTheArray;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn sortByLegendThenPopulate(seriesOfCharts, sortBySize);\r\n\t}\r\n\r\n\r\n}\r\n// #-- END Helper (ssViewMoreChartsHlp) --# //\r\n// #--------------------------------------# //\r\n\r\nangular.module('super-suit-helpers').factory('ssViewMoreChartsHlp', ssViewMoreChartsHlp);\r\n","import {Component} from 'base-component';\r\n// #-------------------------------------------------# //\r\n// #---- Component (super-sparkline-status-card) ----# //\r\n\r\n// props is the directive's isolate scope object\r\n// http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope\r\nconst props = {\r\n\tcontextText: '@',\r\n\tmainMetric: '=',\r\n\tmetricIsPercent: '=',\r\n\tsparklineArray: '=',\r\n\tcomparisonMetric: '=',\r\n\tcomparisonName: '@',\r\n\thideSparklineCharts: '='\r\n};\r\n\r\n// directive definition object overrides\r\nconst config = {\r\n\t// transclude: true\r\n};\r\n\r\n/*@ngInject*/\r\nfunction sparklineStatusCard() {\r\n\r\n\tclass SparklineStatusCard extends Component {\r\n\t\t/*@ngInject*/\r\n\t\tcontroller($scope) {\r\n\t\t\t// view model for tracking state\r\n\t\t\tconst vm = $scope.vm = {\r\n\t\t\t\tdeltaAverage : 0, // As the default\r\n\t\t\t\tsparklineArray: $scope.sparklineArray,\r\n\t\t\t\thideSparklineCharts: $scope.hideSparklineCharts\r\n\t\t\t};\r\n\r\n\t\t\t// behavior that needs to be bound to the view\r\n\t\t\tconst go = $scope.go = { // eslint-disable-line no-unused-vars\r\n\t\t\t};\r\n\r\n\t\t\t$scope.$watchGroup(['mainMetric','comparisonMetric'], function(newValues, oldValues) {\r\n\t\t\t\tconst [mainMetric, comparisonMetric] = newValues;\r\n\t\t\t\tif (mainMetric !=null && comparisonMetric !=null) {\r\n\t\t\t\t\tvm.deltaAverage = Math.round(mainMetric - comparisonMetric);\r\n\t\t\t\t}\r\n\t\t\t\tif(mainMetric){\r\n\t\t\t\t\tif(Number.isFinite(mainMetric)) {\r\n\t\t\t\t\t\tvm.mainMetric = Math.round(mainMetric);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvm.mainMetric = mainMetric;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\treturn new SparklineStatusCard(props, 'sparkline-status-card', config);\r\n}\r\n\r\n// #-- END Component (super-sparkline-status-card) --# //\r\n// #-------------------------------------------------# //\r\n\r\nangular.module('super-suit-components').directive('superSparklineStatusCard', sparklineStatusCard);\r\n","import {Component} from 'base-component';\r\n// #---------------------------------------------# //\r\n// #---- Component (super-faded-trends-list) ----# //\r\n\r\n// props is the directive's isolate scope object\r\n// http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope\r\nconst props = {\r\n\ttitle: '@',\r\n\ttrendLabel: '@', // The label of the button that shows/hides the trends. Note: the words \"Show\" and \"Hide\" are taken care of for you. e.g. Please don't set trendLabel to be \"Show The Trends\"\r\n\tlegendMapping: '=', // NOTE: please provide this early in the component lifecycle if possible\r\n\tapiResults: '=',\r\n\tbenchmarkTitles: '=',\r\n\tmetricIsPercent: '=',\r\n\toverflowName: '=',\r\n\tinitialPreviewNum: '=',\r\n\txCategories: '=',\r\n\tyTitle: '@',\r\n\thelpLink: '=',\r\n\toverrideMaxY: '=',\r\n\tenumHighchartsType: '@', // A type from {enumHighchartsTypes} that this chart will use to configure the internal Highcharts charts.\r\n\tfillAreaUnderFirstLineTrend: '=',\r\n\tdescription: '@',\r\n\tinsight: '@',\r\n};\r\n\r\n// directive definition object overrides\r\nconst config = {\r\n\t// transclude: true\r\n};\r\n\r\n/*@ngInject*/\r\nfunction fadedTrendsList() {\r\n\r\n\tclass FadedTrendsList extends Component {\r\n\t\t/*@ngInject*/\r\n\t\tcontroller($scope, ssInstituteInsightsHlp, ssHighchartsFactoryHlp, $anchorScroll) {\r\n\t\t\tconst defaultPreviewNum = 2;\r\n\t\t\tconst HEIGHT_OF_A_TREND_CHART = 210;\r\n\r\n\t\t\t// view model for tracking state\r\n\t\t\tconst vm = $scope.vm = {\r\n\t\t\t\tnumChartsWeInitiallyShowed : $scope.initialPreviewNum || defaultPreviewNum,\r\n\t\t\t\tuniqueId : 'scroll-on-close' + Math.random().toString(36).slice(2)\r\n\t\t\t};\r\n\r\n\t\t\tconst go = $scope.go = { // eslint-disable-line no-unused-vars\r\n\t\t\t\tcloseOrOpen : closeOrOpen\r\n\t\t\t};\r\n\r\n\r\n\t\t\tfunction closeOrOpen(){\r\n\t\t\t\tif(vm.chartsToShow <= vm.numChartsWeInitiallyShowed){\r\n\t\t\t\t\tvm.chartsToShow = 9999;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvm.chartsToShow = vm.numChartsWeInitiallyShowed;\r\n\t\t\t\t\t$anchorScroll(vm.uniqueId);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfunction resetNumberOfCharts(){\r\n\t\t\t\tvm.chartsToShow = vm.numChartsWeInitiallyShowed;\r\n\t\t\t}\r\n\t\t\tresetNumberOfCharts();\r\n\r\n\t\t\tfunction getMaxDataPoint(aSeriesArr){\r\n\t\t\t\treturn aSeriesArr.reduce(function(runningMaxNum, currentSeries){\r\n\t\t\t\t\tconst largestNumInDataArray = Math.max(...currentSeries.data);\r\n\t\t\t\t\tif(largestNumInDataArray > runningMaxNum){\r\n\t\t\t\t\t\treturn largestNumInDataArray;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn runningMaxNum;\r\n\t\t\t\t\t}\r\n\t\t\t\t},0);\r\n\t\t\t}\r\n\r\n\t\t\tfunction getMinDataPoint(aSeriesArr, removeZeros){\r\n\t\t\t\treturn aSeriesArr.reduce(function(runningMaxNum, currentSeries){\r\n\t\t\t\t\tlet dataArray = currentSeries.data;\r\n\t\t\t\t\tif(removeZeros){\r\n\t\t\t\t\t\tdataArray = dataArray.filter(function(val) {\r\n\t\t\t\t\t\t\treturn val !== 0;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst smallestNumInDataArray = Math.min(...dataArray);\r\n\t\t\t\t\tif(smallestNumInDataArray < runningMaxNum){\r\n\t\t\t\t\t\treturn smallestNumInDataArray;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn runningMaxNum;\r\n\t\t\t\t\t}\r\n\t\t\t\t}, Infinity);\r\n\t\t\t}\r\n\r\n\t\t\t$scope.$watch('benchmarkTitles',function(newValue){\r\n\t\t\t\t$scope.benchmarkTitles = newValue;\r\n\t\t\t});\r\n\r\n\t\t\t$scope.$watchGroup(['apiResults','legendMapping'], function(newValues, oldValues) {\r\n\t\t\t\tconst [apiResults, legendMapping] = newValues;\r\n\t\t\t\tif(!apiResults || !legendMapping || !$scope.benchmarkTitles){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresetNumberOfCharts(); // So that the ng-repeat limits the trends we see to those that\r\n\t\t\t\tconst seriesConfig = {\r\n\t\t\t\t\tpivotByDate: true,\r\n\t\t\t\t\tcurrentIsoDate: moment().toISOString(),\r\n\t\t\t\t\tfillAreaUnderFirstLineTrend: $scope.fillAreaUnderFirstLineTrend,\r\n\t\t\t\t\tgroupLightnessByBenchmark: true\r\n\t\t\t\t};\r\n\t\t\t\tconst allSeries = ssInstituteInsightsHlp.toGenericHighchartSeries(legendMapping, apiResults, seriesConfig);\r\n\t\t\t\t// Future months will have only null data, and therefore be removed. Current/past months will haves 0s not nulls\r\n\t\t\t\tconst seriesThatHaveData = allSeries.filter( aSeries => (aSeries.data && aSeries.data.every(aNum => aNum != null)) );\r\n\r\n\t\t\t\tconst chartType = $scope.enumHighchartsType || 'line';\r\n\t\t\t\tconst skeletonOptions = {\r\n\t\t\t\t\theight: HEIGHT_OF_A_TREND_CHART,\r\n\t\t\t\t\tlegendIsVisible: false,\r\n\t\t\t\t\tnoLowerMargin: true,\r\n\t\t\t\t\tyTitle: $scope.yTitle,\r\n\t\t\t\t\tstackMapping: ssInstituteInsightsHlp.createStackToCharacterMapping(apiResults),\r\n\t\t\t\t\tisPercentage: $scope.metricIsPercent,\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Sort from most recent month to oldest month without reversing order of series within a chart\r\n\t\t\t\tlet seriesWithDataFromNewToOld=[];\r\n\t\t\t\tObject.keys(skeletonOptions.stackMapping).forEach( (stackName) => {\r\n\t\t\t\t\tlet seriesWithStackName = seriesThatHaveData.filter( (series) => {\r\n\t\t\t\t\t\treturn series.stack === stackName;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tseriesWithDataFromNewToOld = seriesWithDataFromNewToOld.concat(seriesWithStackName.reverse());\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif($scope.metricIsPercent){\r\n\t\t\t\t\tconst theMin = getMinDataPoint(seriesWithDataFromNewToOld, true);\r\n\t\t\t\t\tconst theMax = $scope.overrideMaxY || 100;\r\n\t\t\t\t\tskeletonOptions.tickPositioner = ssHighchartsFactoryHlp.tickPositioners.createsAPositionerFunction(10, theMin, theMax);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tskeletonOptions.maxY = getMaxDataPoint(seriesWithDataFromNewToOld);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// Combine the benchmarks/stacks so the blue and green trend lines can be displayed together\r\n\t\t\t\tvm.charts = seriesWithDataFromNewToOld.reduce(function(theGrouping, aSeries){\r\n\t\t\t\t\tconst monthAndYear = aSeries.name.split(' ');\r\n\t\t\t\t\tconst monthOfSeries = monthAndYear[0];\r\n\t\t\t\t\tconst yearOfSeries = monthAndYear[1];\r\n\t\t\t\t\tconst indexOfSharedMonthAndYear = theGrouping.findIndex(function(aChart){\r\n\t\t\t\t\t\treturn aChart.firstWord === monthOfSeries && aChart.secondWord === yearOfSeries;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(indexOfSharedMonthAndYear < 0) {\r\n\t\t\t\t\t\tconst trendHighchartConfig = ssHighchartsFactoryHlp.getBasicHighchartStructure(chartType, skeletonOptions);\r\n\t\t\t\t\t\ttrendHighchartConfig.series = [ aSeries ];\r\n\t\t\t\t\t\ttrendHighchartConfig.xAxis = {\r\n\t\t\t\t\t\t\t// Note: I realize that it's strange to be assigning the legend to the xAxis, but this component is a pivot of the X and Y\r\n\t\t\t\t\t\t\tcategories: ssInstituteInsightsHlp.getOrderedLegendNames(legendMapping)\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tconst newChart = {\r\n\t\t\t\t\t\t\tfirstWord: monthOfSeries,\r\n\t\t\t\t\t\t\tsecondWord: yearOfSeries,\r\n\t\t\t\t\t\t\thighchartConfig: trendHighchartConfig\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\ttheGrouping.push(newChart);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Then put the series that shares the same month and year with it's associated series\r\n\t\t\t\t\t\ttheGrouping[indexOfSharedMonthAndYear].highchartConfig.series.push( aSeries );\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn theGrouping;\r\n\t\t\t\t},[]);\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t}\r\n\r\n\treturn new FadedTrendsList(props, 'faded-trends-list', config);\r\n}\r\n\r\n// #-- END Component (super-faded-trends-list) --# //\r\n// #---------------------------------------------# //\r\n\r\nangular.module('super-suit-components').directive('superFadedTrendsList', fadedTrendsList);\r\n","import {Component} from 'base-component';\r\n// #--------------------------------------------# //\r\n// #---- Component (super-view-more-charts) ----# //\r\n// A component with a chart on top and rows of \"see more\" charts below\r\n\r\n// props is the directive's isolate scope object\r\n// http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope\r\nconst props = {\r\n\ttitle: '@',\r\n\tsubtitle: '@',\r\n\tyTitle: '@',\r\n\tchartLabel: '@', // The label of the button that shows/hides the charts. Note: the words \"Show\" and \"Hide\" are taken care of for you. e.g. Please don't set chartLabel to be \"Show The Charts\"\r\n\thelpLink: '=',\r\n\tlegendMapping: '=', // NOTE: please provide this early in the component lifecycle if possible\r\n\ttopChartConfig: '=',\r\n\tapiMainResults: '=',\r\n\tapiMoreResults: '=',\r\n\tapiMergedDataOverride: '=',\r\n\tbenchmarkTitles: '=',\r\n\tmetricIsPercent: '=',\r\n\toverflowName: '=',\r\n\tdescription: '@',\r\n\tinsight: '@',\r\n\tsortBySize: '=',\r\n\tnoDatesSeriesOverride: '=',\r\n\thideMainMetricsInViewMore: '=',\r\n\thighchartType: '='\r\n};\r\n\r\n// directive definition object overrides\r\nconst config = {\r\n\t// transclude: true\r\n};\r\n\r\n/*@ngInject*/\r\nfunction viewMoreCharts() {\r\n\r\n\tclass ViewMoreCharts extends Component {\r\n\t\t/*@ngInject*/\r\n\t\tcontroller($scope, ssViewMoreChartsHlp, $injector) {\r\n\t\t\t// view model for tracking state\r\n\t\t\tconst vm = $scope.vm = {\r\n\t\t\t};\r\n\r\n\t\t\t$scope.$watch('benchmarkTitles',function(newValue){\r\n\t\t\t\t$scope.benchmarkTitles = newValue;\r\n\t\t\t});\r\n\r\n\t\t\t$scope.$watch('topChartConfig', function(newValue){\r\n\t\t\t\t$scope.topChartConfig = newValue;\r\n\t\t\t});\r\n\r\n\t\t\t$scope.$watchGroup(['apiMainResults','apiMoreResults','legendMapping', 'apiMergedDataOverride'], function(newValues, oldValues) {\r\n\t\t\t\tconst [apiMainResults, apiMoreResults, legendMapping, apiMergedDataOverride] = newValues;\r\n\t\t\t\tif(!apiMainResults || !apiMoreResults || !legendMapping || !$scope.benchmarkTitles){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst chartViewMoreOptions = {\r\n\t\t\t\t\tmetricIsPercent: $scope.metricIsPercent,\r\n\t\t\t\t\tbenchmarkTitles: $scope.benchmarkTitles,\r\n\t\t\t\t\tyTitle: $scope.yTitle,\r\n\t\t\t\t\tsortBySize: $scope.sortBySize,\r\n\t\t\t\t\tnoDatesSeriesOverride: $scope.noDatesSeriesOverride,\r\n\t\t\t\t\tlegendMapping: vm.legendMapping,\r\n\t\t\t\t\thighchartType: $scope.highchartType,\r\n\t\t\t\t\tapiMergedDataOverride: apiMergedDataOverride\r\n\t\t\t\t};\r\n\r\n\t\t\t\tconst bottomChartContainers = ssViewMoreChartsHlp.createBottomChartContainer(legendMapping, apiMoreResults, chartViewMoreOptions);\r\n\t\t\t\tvm.bottomChartContainers = bottomChartContainers;\r\n\t\t\t});\r\n\r\n\t\t\tconst go = $scope.go = { // eslint-disable-line no-unused-vars\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\treturn new ViewMoreCharts(props, 'view-more-charts', config);\r\n}\r\n\r\n// #-- END Component (super-view-more-charts) --# //\r\n// #--------------------------------------------# //\r\n\r\nangular.module('super-suit-components').directive('superViewMoreCharts', viewMoreCharts);\r\n","// #--------------------------------------# //\r\n// #---- Helper (ssViewMoreTrendsHlp) ----# //\r\n\r\n/*@ngInject*/\r\nfunction ssViewMoreTrendsHlp($log, ssArrayHlp, ssMathHlp, ssInstituteInsightsHlp, ssHighchartsFactoryHlp, ssObjectHlp, moment) {\r\n\r\n\treturn{\r\n\t\tcreateTopAndBottomChartContainers\r\n\t};\r\n\r\n\tfunction createTopAndBottomChartContainers(legendMapping, apiResults, viewMoreTrendsOptions){\r\n\t\tconst {metricIsPercent, benchmarkTitles, overflowName, yTitle, fillAreaUnderFirstLineTrend} = viewMoreTrendsOptions;\r\n\t\tconst seriesConfig = {\r\n\t\t\tcurrentIsoDate: moment().toISOString(),\r\n\t\t\tfillAreaUnderFirstLineTrend: fillAreaUnderFirstLineTrend,\r\n\t\t};\r\n\t\tconst genericSeriesArr = ssInstituteInsightsHlp.toGenericHighchartSeries(legendMapping, apiResults, seriesConfig);\r\n\r\n\t\tconst xAxisWithCategories = {\r\n\t\t\tcategories : ssInstituteInsightsHlp.getXCategoriesFromResponse(apiResults)\r\n\t\t};\r\n\r\n\t\tconst seriesOfLines = genericSeriesArr.map((elem) => {\r\n\t\t\tconst aSeriesElem = ssObjectHlp.deepCopy(elem);\r\n\r\n\t\t\t// For safety, make sure that each series element is considered of type line chart or area chart (user's org will be area type)\r\n\t\t\tif(aSeriesElem.type !== 'area'){\r\n\t\t\t\taSeriesElem.type = 'line';\r\n\t\t\t}\r\n\r\n\t\t\tif(metricIsPercent){\r\n\t\t\t\t// Do the averaging of the data here for performance (ie. since you're already in a loop)\r\n\t\t\t\taSeriesElem.mergedData = aSeriesElem.data ? averageMonthsWithData(aSeriesElem.data) : 0;\r\n\t\t\t} else{\r\n\t\t\t\taSeriesElem.mergedData = aSeriesElem.data ? ssMathHlp.sum(nullToZero(aSeriesElem.data)) : 0;\r\n\t\t\t}\r\n\t\t\treturn aSeriesElem;\r\n\t\t});\r\n\r\n\t\tfunction getMaxDataPoint(aSeriesArr){\r\n\t\t\treturn aSeriesArr.reduce(function(runningMaxNum, currentSeries){\r\n\t\t\t\tconst largestNumInDataArray = Math.max(...currentSeries.data);\r\n\t\t\t\tif(largestNumInDataArray > runningMaxNum){\r\n\t\t\t\t\treturn largestNumInDataArray;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn runningMaxNum;\r\n\t\t\t\t}\r\n\t\t\t},0);\r\n\t\t}\r\n\r\n\t\tfunction averageMonthsWithData(seriesData){\r\n\t\t\tconst dataToUse = seriesData.filter( percent => {\r\n\t\t\t\treturn (percent != null);\r\n\t\t\t});\r\n\t\t\t// ssMathHlp.average pukes if you send it an empty array\r\n\t\t\tif(dataToUse.length){\r\n\t\t\t\treturn ssMathHlp.average(dataToUse);\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tfunction sortByLegendThenPopulate(aSeriesArray){\r\n\t\t\t// Create a hashmap, so the full list of series elements can be chunked into subset\r\n\t\t\tconst byLegendName = 'name';\r\n\t\t\tconst legendToSeriesHashMap = ssArrayHlp.groupBy(aSeriesArray, byLegendName);\r\n\r\n\t\t\tconst legendArray = ssInstituteInsightsHlp.getOrderedLegendNames(legendMapping);\r\n\t\t\t// Order the subsets by the legendArray\r\n\t\t\t// Also, populate it with other helper attributes\r\n\t\t\tconst chartContainers = legendArray.map((aLegendTitle, index, thisArray) => {\r\n\t\t\t\tconst seriesSubset = legendToSeriesHashMap[aLegendTitle];\r\n\t\t\t\tif(!seriesSubset){\r\n\t\t\t\t\t$log.error('One of the requested legend items had no corresponding data in the input: ' + aLegendTitle);\r\n\t\t\t\t\treturn; // short-circuit so you can filter out nulls\r\n\t\t\t\t}\r\n\t\t\t\tconst primary = ssArrayHlp.findWhere(seriesSubset, { stack: benchmarkTitles[0] });\r\n\t\t\t\tconst comparison = ssArrayHlp.findWhere(seriesSubset, { stack: benchmarkTitles[1] });\r\n\r\n\t\t\t\tconst skeletonOptions = {\r\n\t\t\t\t\theight: 210,\r\n\t\t\t\t\tlegendIsVisible: false,\r\n\t\t\t\t\tnoLowerMargin: true,\r\n\t\t\t\t\tyTitle: yTitle,\r\n\t\t\t\t};\r\n\t\t\t\tif(metricIsPercent){\r\n\t\t\t\t\tskeletonOptions.tickPositioner = ssHighchartsFactoryHlp.tickPositioners.percentageBy(20);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tskeletonOptions.maxY = getMaxDataPoint(genericSeriesArr);\r\n\t\t\t\t}\r\n\t\t\t\tconst unpopulatedListConfig = ssHighchartsFactoryHlp.getBasicHighchartStructure('line', skeletonOptions);\r\n\t\t\t\tconst highchartConfig = Object.assign({}, unpopulatedListConfig, {\r\n\t\t\t\t\tseries : seriesSubset\r\n\t\t\t\t});\r\n\t\t\t\thighchartConfig.xAxis = xAxisWithCategories;\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tprimary,\r\n\t\t\t\t\tcomparison,\r\n\t\t\t\t\thighchartConfig\r\n\t\t\t\t};\r\n\t\t\t}).filter(value => !!value);\r\n\r\n\t\t\treturn chartContainers;\r\n\t\t}\r\n\r\n\t\tfunction createTopCharts(chartsArray){\r\n\t\t\tconst MAX_CHARTS_FOR_TOP = 5;\r\n\r\n\t\t\tif(chartsArray.length <= MAX_CHARTS_FOR_TOP){\r\n\t\t\t\treturn chartsArray;\r\n\r\n\t\t\t} else {\r\n\t\t\t\t// We want to sort and then limit the charts based ONLY on information from the left side (e.g. the \"My District\" side)\r\n\t\t\t\t// NOTE: Yes, we are mutating the input here. It's so we can synchronize the order of the input and output\r\n\t\t\t\tchartsArray.sort((a, b) => {\r\n\t\t\t\t\t// By Largest\r\n\t\t\t\t\tif(!a || !a.primary || a.primary.mergedData == null ||\r\n\t\t\t\t\t\t!b || !b.primary || b.primary.mergedData == null){\r\n\t\t\t\t\t\t$log.error('couldn\\'t sort because mergedData was missing');\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn b.primary.mergedData - a.primary.mergedData;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconst topCharts = ssObjectHlp.deepCopy(chartsArray);\r\n\r\n\t\t\t\t// Remove the series elements that won't fit (ie: the \"others\" or the \"overflow\") and then combine them to display as one trend\r\n\t\t\t\tconst allRemainingChartsAsOne = topCharts.splice(MAX_CHARTS_FOR_TOP - 1, 9999)\r\n\t\t\t\t\t.reduce(function (acc, curr, i) {\r\n\t\t\t\t\t\tif(!acc || !acc.primary || acc.primary.data == null || acc.primary.mergedData == null){\r\n\t\t\t\t\t\t\t$log.error('couldn\\'t flatten the overflow charts because mergedData was missing');\r\n\t\t\t\t\t\t\treturn acc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(i <= 1){  // <--- check so we can limit unnecessary memory and processing\r\n\t\t\t\t\t\t\tacc.primary.name = overflowName || 'All Others';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!acc.primary.listOfNames) {\r\n\t\t\t\t\t\t\tacc.primary.listOfNames = [];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// Add the legend/details together so they can be recalled later\r\n\t\t\t\t\t\tacc.primary.listOfNames.push(curr.primary.name);\r\n\t\t\t\t\t\t// Further add the metrics together so we can display all charts after the 4th as one chart\r\n\t\t\t\t\t\tacc.primary.mergedData = acc.primary.mergedData + curr.primary.mergedData;\r\n\t\t\t\t\t\tif(acc.comparison) {\r\n\t\t\t\t\t\t\tacc.comparison.mergedData = acc.comparison.mergedData + curr.comparison.mergedData;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Since a sparkline for smushed data would be largely inaccurate (and error prone to create),\r\n\t\t\t\t\t\t// \t\twe create  artificial sparkline from the largest data in the overflow chartContainers\r\n\t\t\t\t\t\t// NOTE: this artificial data does not preclude the bottomChartContainer from displaying the accurate trend chart data (since they are separate containers)\r\n\t\t\t\t\t\tif(i <= 1){\r\n\t\t\t\t\t\t\tacc.primary.data = curr.primary.data;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn acc;\r\n\t\t\t\t\t}/* , purposely no initialValue so that the accumulator automatically gets all of the data from the first chartContainer */);\r\n\r\n\t\t\t\ttopCharts.push(allRemainingChartsAsOne);\r\n\r\n\t\t\t\treturn topCharts;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction nullToZero(anArray){\r\n\t\t\treturn anArray.slice().map(function(aValueInTheArray){\r\n\t\t\t\tif(aValueInTheArray === null){\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn aValueInTheArray;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst bottomChartContainers = sortByLegendThenPopulate(seriesOfLines);\r\n\t\tconst topChartContainers = createTopCharts(bottomChartContainers);\r\n\r\n\t\treturn {topChartContainers, bottomChartContainers};\r\n\t}\r\n\r\n\r\n}\r\n// #-- END Helper (ssViewMoreTrendsHlp) --# //\r\n// #--------------------------------------# //\r\n\r\nangular.module('super-suit-helpers').factory('ssViewMoreTrendsHlp', ssViewMoreTrendsHlp);\r\n","import {Component} from 'base-component';\r\n// #--------------------------------------------# //\r\n// #---- Component (super-view-more-trends) ----# //\r\n// For a single KPI that creates top numbers stats and the \"see more\" charts below\r\n\r\n// props is the directive's isolate scope object\r\n// http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope\r\nconst props = {\r\n\ttitle: '@',\r\n\tsubtitle: '@',\r\n\tyTitle: '@',\r\n\ttrendLabel: '@', // The label of the button that shows/hides the trends. Note: the words \"Show\" and \"Hide\" are taken care of for you. e.g. Please don't set trendLabel to be \"Show The Trends\"\r\n\thelpLink: '=',\r\n\tlegendMapping: '=', // NOTE: please provide this early in the component lifecycle if possible\r\n\tapiResults: '=',\r\n\tbenchmarkTitles: '=',\r\n\tmetricIsPercent: '=',\r\n\toverflowName: '=',\r\n\tfillAreaUnderFirstLineTrend: '=',\r\n\tdescription: '@',\r\n\tinsight: '@',\r\n\thideSparklineCharts: '='\r\n};\r\n\r\n// directive definition object overrides\r\nconst config = {\r\n\t// transclude: true\r\n};\r\n\r\n/*@ngInject*/\r\nfunction viewMoreTrends() {\r\n\r\n\tclass ViewMoreTrends extends Component {\r\n\t\t/*@ngInject*/\r\n\t\tcontroller($scope, ssViewMoreTrendsHlp) {\r\n\t\t\t// view model for tracking state\r\n\t\t\tconst vm = $scope.vm = {\r\n\t\t\t};\r\n\r\n\t\t\t$scope.$watch('benchmarkTitles',function(newValue){\r\n\t\t\t\t$scope.benchmarkTitles = newValue;\r\n\t\t\t});\r\n\r\n\t\t\t$scope.$watchGroup(['apiResults','legendMapping'], function(newValues, oldValues) {\r\n\t\t\t\tconst [apiResults, legendMapping] = newValues;\r\n\t\t\t\tif(!apiResults || !legendMapping || !$scope.benchmarkTitles){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst viewMoreTrendsOptions = {\r\n\t\t\t\t\tmetricIsPercent: $scope.metricIsPercent,\r\n\t\t\t\t\tbenchmarkTitles: $scope.benchmarkTitles,\r\n\t\t\t\t\toverflowName: $scope.overflowName,\r\n\t\t\t\t\tyTitle: $scope.yTitle,\r\n\t\t\t\t\tfillAreaUnderFirstLineTrend: $scope.fillAreaUnderFirstLineTrend,\r\n\t\t\t\t};\r\n\r\n\t\t\t\tconst {topChartContainers, bottomChartContainers} = ssViewMoreTrendsHlp.createTopAndBottomChartContainers(legendMapping, apiResults, viewMoreTrendsOptions);\r\n\r\n\t\t\t\tvm.topChartContainers = topChartContainers;\r\n\t\t\t\tvm.bottomChartContainers = bottomChartContainers;\r\n\t\t\t});\r\n\r\n\t\t\tconst go = $scope.go = { // eslint-disable-line no-unused-vars\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\treturn new ViewMoreTrends(props, 'view-more-trends', config);\r\n}\r\n\r\n// #-- END Component (super-view-more-trends) --# //\r\n// #--------------------------------------------# //\r\n\r\nangular.module('super-suit-components').directive('superViewMoreTrends', viewMoreTrends);\r\n","// #--------------------------------------# //\r\n// #---- Helper (ssViewMoreTrendsMashupHlp) ----# //\r\n\r\n/*@ngInject*/\r\nfunction ssViewMoreTrendsMashupHlp($log, ssArrayHlp, ssMathHlp, ssInstituteInsightsHlp, ssHighchartsFactoryHlp, ssObjectHlp, moment) {\r\n\r\n\treturn{\r\n\t\tcreateTopAndBottomChartContainers\r\n\t};\r\n\r\n\tfunction createTopAndBottomChartContainers(legendMapping, chartApiResults, featuredApiResults, viewMoreTrendsOptions){\r\n\t\tconst {metricIsPercent, benchmarkTitles, overflowName, yTitle, fillAreaUnderFirstLineTrend} = viewMoreTrendsOptions;\r\n\t\tconst seriesConfig = {\r\n\t\t\tcurrentIsoDate: moment().toISOString(),\r\n\t\t\tfillAreaUnderFirstLineTrend: fillAreaUnderFirstLineTrend,\r\n\t\t};\r\n\t\tconst genericSeriesArr = ssInstituteInsightsHlp.toGenericHighchartSeries(legendMapping, chartApiResults, seriesConfig);\r\n\t\tconst remappedFeaturedValues = ssInstituteInsightsHlp.detailToLegendRemap(featuredApiResults, legendMapping);\r\n\r\n\t\tconst xAxisWithCategories = {\r\n\t\t\tcategories : ssInstituteInsightsHlp.getXCategoriesFromResponse(chartApiResults)\r\n\t\t};\r\n\r\n\t\tconst seriesOfLines = genericSeriesArr.map((elem) => {\r\n\t\t\tconst aSeriesElem = ssObjectHlp.deepCopy(elem);\r\n\r\n\t\t\t// For safety, make sure that each series element is considered of type line chart or area chart (user's org will be area type)\r\n\t\t\tif(aSeriesElem.type !== 'area'){\r\n\t\t\t\taSeriesElem.type = 'line';\r\n\t\t\t}\r\n\r\n\t\t\tconst benchmarkIndex = (elem.stack === chartApiResults[0]._parameters.name) ? 0 : 1;\r\n\r\n\t\t\tif(remappedFeaturedValues[benchmarkIndex]._groups[0].legendKeyValues[elem.name]){\r\n\t\t\t\taSeriesElem.mergedData = remappedFeaturedValues[benchmarkIndex]._groups[0].legendKeyValues[elem.name];\r\n\t\t\t} else{\r\n\t\t\t\taSeriesElem.mergedData = 0;\r\n\t\t\t}\r\n\t\t\treturn aSeriesElem;\r\n\t\t});\r\n\r\n\t\tfunction getMaxDataPoint(aSeriesArr){\r\n\t\t\treturn aSeriesArr.reduce(function(runningMaxNum, currentSeries){\r\n\t\t\t\tconst largestNumInDataArray = Math.max(...currentSeries.data);\r\n\t\t\t\tif(largestNumInDataArray > runningMaxNum){\r\n\t\t\t\t\treturn largestNumInDataArray;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn runningMaxNum;\r\n\t\t\t\t}\r\n\t\t\t},0);\r\n\t\t}\r\n\r\n\t\tfunction sortByLegendThenPopulate(aSeriesArray){\r\n\t\t\t// Create a hashmap, so the full list of series elements can be chunked into subset\r\n\t\t\tconst byLegendName = 'name';\r\n\t\t\tconst legendToSeriesHashMap = ssArrayHlp.groupBy(aSeriesArray, byLegendName);\r\n\r\n\t\t\tconst legendArray = ssInstituteInsightsHlp.getOrderedLegendNames(legendMapping);\r\n\t\t\t// Order the subsets by the legendArray\r\n\t\t\t// Also, populate it with other helper attributes\r\n\t\t\tconst chartContainers = legendArray.map((aLegendTitle, index, thisArray) => {\r\n\t\t\t\tconst seriesSubset = legendToSeriesHashMap[aLegendTitle];\r\n\t\t\t\tif(!seriesSubset){\r\n\t\t\t\t\t$log.error('One of the requested legend items had no corresponding data in the input: ' + aLegendTitle);\r\n\t\t\t\t\treturn; // short-circuit so you can filter out nulls\r\n\t\t\t\t}\r\n\t\t\t\tconst primary = ssArrayHlp.findWhere(seriesSubset, { stack: benchmarkTitles[0] });\r\n\t\t\t\tconst comparison = ssArrayHlp.findWhere(seriesSubset, { stack: benchmarkTitles[1] });\r\n\r\n\t\t\t\tconst skeletonOptions = {\r\n\t\t\t\t\theight: 210,\r\n\t\t\t\t\tlegendIsVisible: false,\r\n\t\t\t\t\tnoLowerMargin: true,\r\n\t\t\t\t\tyTitle: yTitle,\r\n\t\t\t\t};\r\n\t\t\t\tif(metricIsPercent){\r\n\t\t\t\t\tskeletonOptions.tickPositioner = ssHighchartsFactoryHlp.tickPositioners.percentageBy(20);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tskeletonOptions.maxY = getMaxDataPoint(genericSeriesArr);\r\n\t\t\t\t}\r\n\t\t\t\tconst unpopulatedListConfig = ssHighchartsFactoryHlp.getBasicHighchartStructure('line', skeletonOptions);\r\n\t\t\t\tconst highchartConfig = Object.assign({}, unpopulatedListConfig, {\r\n\t\t\t\t\tseries : seriesSubset\r\n\t\t\t\t});\r\n\t\t\t\thighchartConfig.xAxis = xAxisWithCategories;\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tprimary,\r\n\t\t\t\t\tcomparison,\r\n\t\t\t\t\thighchartConfig\r\n\t\t\t\t};\r\n\t\t\t}).filter(value => !!value);\r\n\r\n\t\t\treturn chartContainers;\r\n\t\t}\r\n\r\n\t\tfunction createTopCharts(chartsArray){\r\n\t\t\tconst MAX_CHARTS_FOR_TOP = 5;\r\n\r\n\t\t\tif(chartsArray.length <= MAX_CHARTS_FOR_TOP){\r\n\t\t\t\treturn chartsArray;\r\n\r\n\t\t\t} else {\r\n\t\t\t\t// We want to sort and then limit the charts based ONLY on information from the left side (e.g. the \"My District\" side)\r\n\t\t\t\t// NOTE: Yes, we are mutating the input here. It's so we can synchronize the order of the input and output\r\n\t\t\t\tchartsArray.sort((a, b) => {\r\n\t\t\t\t\t// By Largest\r\n\t\t\t\t\tif(!a || !a.primary || a.primary.mergedData == null ||\r\n\t\t\t\t\t\t!b || !b.primary || b.primary.mergedData == null){\r\n\t\t\t\t\t\t$log.error('couldn\\'t sort because mergedData was missing');\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn b.primary.mergedData - a.primary.mergedData;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconst topCharts = ssObjectHlp.deepCopy(chartsArray);\r\n\r\n\t\t\t\t// Remove the series elements that won't fit (ie: the \"others\" or the \"overflow\") and then combine them to display as one trend\r\n\t\t\t\tconst allRemainingChartsAsOne = topCharts.splice(MAX_CHARTS_FOR_TOP - 1, 9999)\r\n\t\t\t\t\t.reduce(function (acc, curr, i) {\r\n\t\t\t\t\t\tif(!acc || !acc.primary || acc.primary.data == null || acc.primary.mergedData == null){\r\n\t\t\t\t\t\t\t$log.error('couldn\\'t flatten the overflow charts because mergedData was missing');\r\n\t\t\t\t\t\t\treturn acc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(i <= 1){  // <--- check so we can limit unnecessary memory and processing\r\n\t\t\t\t\t\t\tacc.primary.name = overflowName || 'All Others';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!acc.primary.listOfNames) {\r\n\t\t\t\t\t\t\tacc.primary.listOfNames = [];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// Add the legend/details together so they can be recalled later\r\n\t\t\t\t\t\tacc.primary.listOfNames.push(curr.primary.name);\r\n\t\t\t\t\t\t// Further add the metrics together so we can display all charts after the 4th as one chart\r\n\t\t\t\t\t\tacc.primary.mergedData = acc.primary.mergedData + curr.primary.mergedData;\r\n\t\t\t\t\t\tif(acc.comparison) {\r\n\t\t\t\t\t\t\tacc.comparison.mergedData = acc.comparison.mergedData + curr.comparison.mergedData;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Since a sparkline for smushed data would be largely inaccurate (and error prone to create),\r\n\t\t\t\t\t\t// \t\twe create  artificial sparkline from the largest data in the overflow chartContainers\r\n\t\t\t\t\t\t// NOTE: this artificial data does not preclude the bottomChartContainer from displaying the accurate trend chart data (since they are separate containers)\r\n\t\t\t\t\t\tif(i <= 1){\r\n\t\t\t\t\t\t\tacc.primary.data = curr.primary.data;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn acc;\r\n\t\t\t\t\t}/* , purposely no initialValue so that the accumulator automatically gets all of the data from the first chartContainer */);\r\n\r\n\t\t\t\ttopCharts.push(allRemainingChartsAsOne);\r\n\r\n\t\t\t\treturn topCharts;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst bottomChartContainers = sortByLegendThenPopulate(seriesOfLines);\r\n\t\tconst topChartContainers = createTopCharts(bottomChartContainers);\r\n\r\n\t\treturn {topChartContainers, bottomChartContainers};\r\n\t}\r\n\r\n\r\n}\r\n// #-- END Helper (ssViewMoreTrendsMashupHlp) --# //\r\n// #--------------------------------------# //\r\n\r\nangular.module('super-suit-helpers').factory('ssViewMoreTrendsMashupHlp', ssViewMoreTrendsMashupHlp);\r\n","import {Component} from 'base-component';\r\n// #--------------------------------------------# //\r\n// #---- Component (super-view-more-trends) ----# //\r\n// For when there are two separate KPIs that make up the top numbers stats and the \"see more\" charts below\r\n\r\n// props is the directive's isolate scope object\r\n// http://onehungrymind.com/angularjs-sticky-notes-pt-2-isolated-scope\r\nconst props = {\r\n\ttitle: '@',\r\n\tsubtitle: '@',\r\n\tyTitle: '@',\r\n\ttrendLabel: '@', // The label of the button that shows/hides the trends. Note: the words \"Show\" and \"Hide\" are taken care of for you. e.g. Please don't set trendLabel to be \"Show The Trends\"\r\n\thelpLink: '=',\r\n\tlegendMapping: '=', // NOTE: please provide this early in the component lifecycle if possible\r\n\tchartApiResults: '=',\r\n\tfeaturedApiResults: '=',\r\n\tbenchmarkTitles: '=',\r\n\tmetricIsPercent: '=',\r\n\toverflowName: '=',\r\n\tfillAreaUnderFirstLineTrend: '=',\r\n\tdescription: '@',\r\n\tinsight: '@',\r\n\thideSparklineCharts: '='\r\n};\r\n\r\n// directive definition object overrides\r\nconst config = {\r\n\t// transclude: true\r\n};\r\n\r\n/*@ngInject*/\r\nfunction viewMoreTrendsMashup() {\r\n\r\n\tclass ViewMoreTrendsMashup extends Component {\r\n\t\t/*@ngInject*/\r\n\t\tcontroller($scope, ssViewMoreTrendsMashupHlp) {\r\n\t\t\t// view model for tracking state\r\n\t\t\tconst vm = $scope.vm = {\r\n\t\t\t};\r\n\r\n\t\t\t$scope.$watch('benchmarkTitles',function(newValue){\r\n\t\t\t\t$scope.benchmarkTitles = newValue;\r\n\t\t\t});\r\n\r\n\t\t\t$scope.$watchGroup(['chartApiResults','featuredApiResults','legendMapping'], function(newValues, oldValues) {\r\n\t\t\t\tconst [chartApiResults, featuredApiResults, legendMapping] = newValues;\r\n\t\t\t\tif(!chartApiResults || !featuredApiResults || !legendMapping || !$scope.benchmarkTitles){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst viewMoreTrendsOptions = {\r\n\t\t\t\t\tmetricIsPercent: $scope.metricIsPercent,\r\n\t\t\t\t\tbenchmarkTitles: $scope.benchmarkTitles,\r\n\t\t\t\t\toverflowName: $scope.overflowName,\r\n\t\t\t\t\tyTitle: $scope.yTitle,\r\n\t\t\t\t\tfillAreaUnderFirstLineTrend: $scope.fillAreaUnderFirstLineTrend,\r\n\t\t\t\t};\r\n\r\n\t\t\t\tconst {topChartContainers, bottomChartContainers} = ssViewMoreTrendsMashupHlp.createTopAndBottomChartContainers(legendMapping, chartApiResults, featuredApiResults, viewMoreTrendsOptions);\r\n\r\n\t\t\t\tvm.topChartContainers = topChartContainers;\r\n\t\t\t\tvm.bottomChartContainers = bottomChartContainers;\r\n\t\t\t});\r\n\r\n\t\t\tconst go = $scope.go = { // eslint-disable-line no-unused-vars\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\treturn new ViewMoreTrendsMashup(props, 'view-more-trends', config);\r\n}\r\n\r\n// #-- END Component (super-view-more-trends) --# //\r\n// #--------------------------------------------# //\r\n\r\nangular.module('super-suit-components').directive('superViewMoreTrendsMashup', viewMoreTrendsMashup);\r\n","// #-----------------------------------------# //\r\n// #---- Helper (ssInstituteInsightsHlp) ----# //\r\n\r\n/*@ngInject*/\r\nfunction ssInstituteInsightsHlp($log, ssDashboardColorsHlp, ssObjectHlp, ssMathHlp, moment, enumHighchartsTypes) {\r\n\r\n\treturn{\r\n\t\ttoGenericHighchartSeries,\r\n\t\tgetXCategoriesFromResponse,\r\n\t\tisAnInstituteResponse,\r\n\t\tdetailToLegendRemap,\r\n\t\tgetDateOffset,\r\n\t\tgetOrderedLegendNames,\r\n\t\twarningGuardConditions,\r\n\t\thasSomeData,\r\n\t\tcreateStackToCharacterMapping,\r\n\t\tgetSeriesWithCustomXAxisCategories,\r\n\t\tgetSparkChartSeriesWithCustomXAxisCategories\r\n\t};\r\n\r\n\t/**\r\n\t * Useful for preparing unruly api results so that they can be easily performed upon by other functions in ssInstituteInsightsHlp\r\n\t * Note: this is only necessary to use when an institute api result was unable to keep the detail object to one level.\r\n\t * @param {insightsAbsenceApi[]} anInstituteResponse - the result of any insights endpoint call\r\n\t * @param {object[]} legendMapping - config object use to remap different detail attributes to the new legend attribute\r\n\t * @param {string[]} legendMapping[i].from - a list of detail attributes (ie. strings) that you want the values from\r\n\t * @param {string} legendMapping[i].to - the new name for the legend key\r\n\t * @param {function} legendMapping[i].mathFunction - something from ssArrayHlp or a custom mathematics function\r\n\t * @returns {insightsAbsenceApi[]} theRes - a modified response where detail is a one-level deep object of key/value pairs\r\n     */\r\n\tfunction detailToLegendRemap(anInstituteResponse, legendMapping){\r\n\t\t$$throwIfNotAnInstituteResponse(anInstituteResponse);\r\n\t\tconst theRes = ssObjectHlp.deepCopy(anInstituteResponse);\r\n\t\treturn theRes.map(function (aBenchmarkSide) {\r\n\t\t\tif(aBenchmarkSide._groups) {\r\n\t\t\t\t// Note: I know it looks like this function is impure, but we did a deepCopy above, so no mutation of inputs should be occurring (P.S. there's a unit test to verify this)\r\n\t\t\t\taBenchmarkSide._groups = aBenchmarkSide._groups.map(function (_aGroup) {\r\n\t\t\t\t\tif (!_aGroup.dataIsAvailable) {\r\n\t\t\t\t\t\treturn _aGroup;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (!_aGroup.detail) {\r\n\t\t\t\t\t\t\tthrow new Error('dataIsAvailable was true, however detail was falsy. This likely means that the apiResult was malformed');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst flattenedDetail = flattenAnyDetailNesting(_aGroup.detail);\r\n\t\t\t\t\t\t_aGroup.legendKeyValues = remapDetailsToLegend(flattenedDetail, legendMapping);\r\n\t\t\t\t\t\treturn _aGroup;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn aBenchmarkSide;\r\n\t\t});\r\n\r\n\t\tfunction flattenAnyDetailNesting(detailObj){\r\n\t\t\tconst detail = ssObjectHlp.deepCopy(detailObj);\r\n\t\t\tObject.keys(detail).forEach(function (aKey) {\r\n\t\t\t\t// Check to see if any of the detail attributes are complex objects\r\n\t\t\t\tif (detail[aKey] && typeof detail[aKey] === 'object' && !Array.isArray(detail[aKey])) {\r\n\t\t\t\t\t// This means that it's not a simple key/value pair\r\n\t\t\t\t\tObject.keys(detail[aKey]).forEach(function (aSubDetailKey) {\r\n\t\t\t\t\t\tif (detail.hasOwnProperty(aSubDetailKey)) {\r\n\t\t\t\t\t\t\treturn $log.error('API/Pact test error. The consumer contract testing should not allow for ' +\r\n\t\t\t\t\t\t\t\t'complex objects in the detail obj that have properties that also exist directly on detail.');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdetail[aSubDetailKey] = detail[aKey][aSubDetailKey];\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// Get rid of the complex key since all of it's internals have been brought back one level;\r\n\t\t\t\t\tdelete detail[aKey];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn detail;\r\n\t\t}\r\n\r\n\t\tfunction remapDetailsToLegend(detailObj, legendMapping){\r\n\t\t\tconst detail = ssObjectHlp.deepCopy(detailObj);\r\n\t\t\tif(!legendMapping){\r\n\t\t\t\treturn detail; // basically passthrough\r\n\t\t\t}\r\n\t\t\tconst legendKeyValues = legendMapping.reduce(function(newLegendObj, mapping){\r\n\t\t\t\tif(!mapping.to || !mapping.from || !mapping.from.forEach){\r\n\t\t\t\t\tthrow new Error('Malformed input: legendMapping either did not have the \\'from\\' array or the \\'to\\' string');\r\n\t\t\t\t}\r\n\t\t\t\t// mapping.from\r\n\t\t\t\t// mapping.to\r\n\t\t\t\tconst mathMethod = mapping.mathMethod ? mapping.mathMethod : ssMathHlp.average;\r\n\r\n\t\t\t\tmapping.from.forEach(function(aFromAttr){\r\n\t\t\t\t\tif(!detail.hasOwnProperty(aFromAttr)){\r\n\t\t\t\t\t\t//> log('The value that you tried to map from is not available. Your input mapping object probably had a typo.', '')\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif(newLegendObj[mapping.to] === undefined){ // Null is actually allowed from the server\r\n\t\t\t\t\t\t\tnewLegendObj[mapping.to] = detail[aFromAttr];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tnewLegendObj[mapping.to] = mathMethod([\r\n\t\t\t\t\t\t\t\tnewLegendObj[mapping.to] || 0,\r\n\t\t\t\t\t\t\t\tdetail[aFromAttr] || 0 // BUT, null is not allowable when averaging or summing,\r\n\t\t\t\t\t\t\t\t\t// so we have to protect in these unfortunate cases where doing math is required due to\r\n\t\t\t\t\t\t\t\t\t// the backend not being able to prepare a concise key/value pair array in details\r\n\t\t\t\t\t\t\t]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn newLegendObj;\r\n\r\n\t\t\t},{});\r\n\t\t\treturn legendKeyValues;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {object[]} legendMapping - see the jsDocs in detailToLegendRemap\r\n\t * @param {insightsAbsenceApi[]} anInstituteResponse - the result of any insights endpoint call\r\n\t * @param {object} otherOptions - config options used by the createASeries method\r\n\t * @param {boolean} otherOptions.groupColorsByBenchmark - if true, all elements in the series that share the same \"stack\" value will share the same color (but not the same lightness)\r\n\t * @param {boolean} otherOptions.groupLightnessByBenchmark - if true, all elements in the series that share the same \"stack\" value will share the same lightness (but not the same color)\r\n\t * @param {boolean} otherOptions.usePatternForAlternatingSeries - if true, all elements in the second series change to normal color lightness but with a diagonal pattern\r\n\t * @param {boolean} otherOptions.reverseLightness - if true, the next lightness value that is chosen will be darker than the previous (as opposed to lighter than the previous)\r\n\t * @param {number} otherOptions.numColorsToAdvance - skips the starting position in default list of colors by this number\r\n\t * @param {boolean} otherOptions.alwaysShowFullLegend - if true, the legend that is populated for both stacks of data will be displayed. Otherwise, only the first stack's legend will be displayed\r\n\t * @param {boolean} otherOptions.pivotByDate - if true, this will make the X coordinates be based on legend items, as opposed the usual behavior where the x axis is the date of each group\r\n\t * @param {string} otherOptions.currentIsoDate - iso date after which data points with no data will be plotted as nulls instead of 0s\r\n\t * @param {boolean} otherOptions.fillAreaUnderFirstLineTrend - adds fill color to area underneath first series IF its a line chart\r\n\t  * @returns {object[]} arrayOfHighchartsSeriesObjects\r\n\t */\r\n\tfunction toGenericHighchartSeries(legendMapping, anInstituteResponse, otherOptions) {\r\n\t\tlet arrayOfHighchartsSeriesObjects = [];\r\n\r\n\t\tif(!ssDashboardColorsHlp.getOptions){\r\n\t\t\treturn $log.error('ssDashboardColorsHlp must have changed. It\\'s supposed to have a getOptions method.');\r\n\t\t}\r\n\t\t$$throwIfNotAnInstituteResponse(anInstituteResponse);\r\n\t\tconst ssDashboardColorsHlpOptionsArray = ssDashboardColorsHlp.getOptions();\r\n\r\n\t\tconst benchmarksThatWereWideEnough = anInstituteResponse.filter(aBenchmarkSide => aBenchmarkSide._insightResultCountExceedsMinimum === true);\r\n\r\n\t\tconst transformedResponse = detailToLegendRemap(benchmarksThatWereWideEnough, legendMapping);\r\n\t\tconst orderedLegendNames = getOrderedLegendNames(legendMapping);\r\n\r\n\t\ttransformedResponse.forEach(function (aBenchmarkSide, sideIndex) {\r\n\t\t\tif(!aBenchmarkSide._parameters.name){\r\n\t\t\t\treturn $log.error('Without requesting name with institute request, then we can\\'t map the benchmark name.');\r\n\t\t\t}\r\n\t\t\t// Don't display data for a benchmark side if the data for it is too specific to be statistically relevant\r\n\t\t\tconst filterIsTooSpecific = (aBenchmarkSide._insightResultCountExceedsMinimum === false);\r\n\t\t\t// Don't display data for a benchmark side if the data for it is completely unavailable\r\n\t\t\tconst hasAtLeastSomeData = hasSomeData(aBenchmarkSide);\r\n\t\t\tif(!filterIsTooSpecific && hasAtLeastSomeData) {\r\n\t\t\t\tconst benchmarkName = aBenchmarkSide._parameters.name;\r\n\t\t\t\tlet newSeriesElems;\r\n\t\t\t\tif(otherOptions && otherOptions.pivotByDate) {\r\n\t\t\t\t\tconst dateLegendHashMap = createDateToLegendHashMap(aBenchmarkSide._groups, orderedLegendNames, otherOptions.currentIsoDate);\r\n\t\t\t\t\tnewSeriesElems = createASeries(benchmarkName, Object.keys(dateLegendHashMap), dateLegendHashMap, ssDashboardColorsHlpOptionsArray, sideIndex, otherOptions);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst legendToValueHashMap = createLegendToValueHashMap(aBenchmarkSide._groups, orderedLegendNames, otherOptions ? otherOptions.currentIsoDate : null);\r\n\t\t\t\t\tnewSeriesElems = createASeries(benchmarkName, orderedLegendNames, legendToValueHashMap, ssDashboardColorsHlpOptionsArray, sideIndex, otherOptions);\r\n\t\t\t\t}\r\n\t\t\t\tif(otherOptions && otherOptions.fillAreaUnderFirstLineTrend){\r\n\t\t\t\t\tif(sideIndex === 0) {\r\n\t\t\t\t\t\tnewSeriesElems.forEach(seriesObj => {\r\n\t\t\t\t\t\t\tseriesObj.fillOpacity=0.1;\r\n\t\t\t\t\t\t\tseriesObj.type = enumHighchartsTypes.area;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tarrayOfHighchartsSeriesObjects = arrayOfHighchartsSeriesObjects.concat(newSeriesElems);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn arrayOfHighchartsSeriesObjects;\r\n\t}\r\n\r\n\t// shared date offset to determine when past month data should be shown\r\n\t// i.e. don't show September until October 10th\r\n\tfunction getDateOffset() {\r\n\t\treturn 10;\r\n\t}\r\n\r\n\tfunction getOrderedLegendNames(legendMapping){\r\n\t\treturn legendMapping.map((aLegendFromToPair) => {\r\n\t\t\tif(!aLegendFromToPair.to){\r\n\t\t\t\tthrow new Error('Malformed input: legendMapping either did not have the \\'to\\' string');\r\n\t\t\t}\r\n\t\t\treturn aLegendFromToPair.to;\r\n\t\t});\r\n\t}\r\n\r\n\tfunction $$throwIfNotAnInstituteResponse(anInstituteResponse){\r\n\t\tif(!isAnInstituteResponse(anInstituteResponse)){\r\n\t\t\tthrow new Error('anInstituteResponse did not pass duck typing. Review the input against the isAnInstituteResponse duck type method.');\r\n\t\t}\r\n\t}\r\n\r\n\tfunction isAnInstituteResponse(theResponse){\r\n\t\tif(!theResponse || !theResponse.length){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t//Take the first one since an institute response should have at least one \"side\" even in the no-comparison mode\r\n\t\tconst aBenchmarkSide = theResponse[0];\r\n\t\tif(\r\n\t\t\t(\r\n\t\t\t\taBenchmarkSide._groups != null &&\r\n\t\t\t\taBenchmarkSide._insightResultCountExceedsMinimum != null &&\r\n\t\t\t\taBenchmarkSide._parameters != null\r\n\t\t\t) ||\r\n\t\t\t(\r\n\t\t\t\taBenchmarkSide._insightResultCountExceedsMinimum === false &&\r\n\t\t\t\taBenchmarkSide._groups == null\r\n\r\n\t\t\t)\r\n\t\t){\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {insightsAbsenceApi[]} anInstituteResponse - the result of any insights endpoint call\r\n     */\r\n\tfunction getXCategoriesFromResponse(anInstituteResponse){\r\n\t\t$$throwIfNotAnInstituteResponse(anInstituteResponse);\r\n\t\tconst availableBenchmarks = anInstituteResponse.filter(aBenchmarkSide => {\r\n\t\t\treturn hasSomeData(aBenchmarkSide);\r\n\t\t});\r\n\t\tif(!availableBenchmarks || !availableBenchmarks.length){\r\n\t\t\t//> log('There is is no groups with data in either benchmark');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst oneBenchmarkSide = availableBenchmarks[0]; // Doesn't matter which side for the xAxis categories\r\n\t\treturn oneBenchmarkSide._groups.reduce(function(acc, aGroup){\r\n\t\t\tacc.push(moment(aGroup.effectiveStartDate).format('MMM YYYY'));\r\n\t\t\treturn acc;\r\n\t\t}, []);\r\n\t}\r\n\r\n\tfunction createLegendToValueHashMap(_groups, orderedLegendNames, currentIsoDate){\r\n\t\tconst dateOffset = getDateOffset();\r\n\t\tconst numPrevMonths = moment(currentIsoDate).date() >= dateOffset ? 1 : 2;\r\n\t\tconst lastMonthToShow = moment(currentIsoDate).subtract(numPrevMonths, 'months');\r\n\r\n\t\treturn _groups.reduce(function(acc, _aGroup){\r\n\t\t\tconst completedMonth = !moment(_aGroup.effectiveStartDate).isAfter(lastMonthToShow);\r\n\r\n\t\t\torderedLegendNames.forEach(function(aLegendName){\r\n\t\t\t\tif(!acc[aLegendName]){\r\n\t\t\t\t\tacc[aLegendName] = [];\r\n\t\t\t\t}\r\n\t\t\t\tif (completedMonth) {\r\n\t\t\t\t\tif (_aGroup.dataIsAvailable && _aGroup.legendKeyValues && _aGroup.legendKeyValues[aLegendName] != null) {\r\n\t\t\t\t\t\tacc[aLegendName].push(_aGroup.legendKeyValues[aLegendName]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tacc[aLegendName].push(0);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tacc[aLegendName].push(null);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn acc;\r\n\t\t}, {});\r\n\t}\r\n\r\n\tfunction createDateToLegendHashMap(_groups, orderedLegendNames, currentIsoDate){\r\n\t\tconst dateOffset = getDateOffset();\r\n\t\tconst numPrevMonths = moment(currentIsoDate).date() >= dateOffset ? 1 : 2;\r\n\t\tconst lastMonthToShow = moment(currentIsoDate).subtract(numPrevMonths, 'months');\r\n\r\n\t\treturn _groups.reduce(function(acc, _aGroup){\r\n\t\t\tconst dateKey = moment(_aGroup.effectiveStartDate).format('MMMM YYYY');\r\n\t\t\tconst completedMonth = !moment(_aGroup.effectiveStartDate).isAfter(lastMonthToShow);\r\n\r\n\t\t\torderedLegendNames.forEach(function(aLegendName){\r\n\t\t\t\tif(!acc[dateKey]){\r\n\t\t\t\t\tacc[dateKey] = [];\r\n\t\t\t\t}\r\n\t\t\t\tif (completedMonth) {\r\n\t\t\t\t\tif (_aGroup.dataIsAvailable && _aGroup.legendKeyValues && _aGroup.legendKeyValues[aLegendName] != null) {\r\n\t\t\t\t\t\tacc[dateKey].push(_aGroup.legendKeyValues[aLegendName]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tacc[dateKey].push(0);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tacc[dateKey].push(null);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn acc;\r\n\t\t},{});\r\n\t}\r\n\r\n\tfunction createASeries(stackName, orderedLegendNames, categoryToValuesHashMap, ssDashboardColorsHlpOptionsArray, sideIndex, otherOptions){\r\n\t\t// Destructure the options\r\n\t\tconst {\r\n\t\t\tgroupColorsByBenchmark = false,\r\n\t\t\tgroupLightnessByBenchmark = true,\r\n\t\t\tusePatternForAlternatingSeries=false,\r\n\t\t\treverseLightness = false,\r\n\t\t\tnumColorsToAdvance = 0,\r\n\t\t\talwaysShowFullLegend = false,\r\n\t\t} = otherOptions || {};\r\n\r\n\t\tlet colorArrayForThisSeries = ssDashboardColorsHlpOptionsArray;\r\n\r\n\t\treturn orderedLegendNames.map(function(aCategoryInLegend, indexInTheLegend) {\r\n\t\t\tlet colorByNumberIndex = groupColorsByBenchmark ? indexInTheLegend : sideIndex;\r\n\t\t\tlet lightnessByNumberIndex = groupLightnessByBenchmark ? sideIndex : indexInTheLegend;\r\n\r\n\t\t\tcolorByNumberIndex = colorByNumberIndex + numColorsToAdvance;\r\n\t\t\tlet lightnessChoice = determineLightness(lightnessByNumberIndex, reverseLightness);\r\n\t\t\tlet usePattern = determineWhetherToUsePatten(lightnessByNumberIndex, usePatternForAlternatingSeries);\r\n\r\n\t\t\tif(usePattern){\r\n\t\t\t\tcolorArrayForThisSeries= ssDashboardColorsHlp.getPatternedOptions();\r\n\t\t\t\tlightnessChoice='normal'; // If pattern, use normal color - UX prefers texture with normal color\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tname: aCategoryInLegend,\r\n\t\t\t\tdata: categoryToValuesHashMap[aCategoryInLegend],\r\n\t\t\t\tstack: stackName,\r\n\t\t\t\tcolor: colorArrayForThisSeries[colorByNumberIndex][lightnessChoice],\r\n\t\t\t\tshowInLegend: alwaysShowFullLegend || sideIndex === 0 ? true : false\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\tfunction determineLightness(index, darkIsNext) {\r\n\t\t\tif (darkIsNext) {\r\n\t\t\t\treturn (index === 2) ? 'lighter' : (index === 1) ? 'darker' : 'normal';\r\n\t\t\t} else {\r\n\t\t\t\treturn (index === 2) ? 'darker' : (index === 1) ? 'lighter' : 'normal';\r\n\t\t\t}\r\n\t\t}\r\n\t\tfunction determineWhetherToUsePatten(index, considerUsingPattern) {\r\n\t\t\tif(considerUsingPattern) {\r\n\t\t\t\tif (index%2 === 1) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {ssInsightsAbsenceApi} anInstituteResponse - the result of an ssInsightsAbsenceApi method call\r\n\t * //deprecated activeUserHasCentral - whether or not the active user is logged in as an organization that bought Frontline Central\r\n\t * @returns {*}\r\n     */\r\n\tfunction createStackToCharacterMapping(anInstituteResponse, activeUserHasCentral){\r\n\t\t$$throwIfNotAnInstituteResponse(anInstituteResponse);\r\n\r\n\t\treturn anInstituteResponse.reduce(function(mapping, aBenchmarkSide, index){\r\n\t\t\tmapping[aBenchmarkSide._parameters.name] = (index === 0 ? 'A' : 'B');\r\n\t\t\treturn mapping;\r\n\t\t},{});\r\n\t}\r\n\r\n\tfunction $$checkForBothTooSpecific(anInstituteResponse){\r\n\t\t$$throwIfNotAnInstituteResponse(anInstituteResponse);\r\n\r\n\t\tconst benchmarkSidesThatWereWideEnough = anInstituteResponse.filter(aBenchmarkSide => aBenchmarkSide._insightResultCountExceedsMinimum === true);\r\n\r\n\t\tif(benchmarkSidesThatWereWideEnough.length < 1){\r\n\t\t\treturn 'Please widen the filter criteria above.';\r\n\t\t}\r\n\t}\r\n\r\n\tfunction hasSomeData(aBenchmarkSide){\r\n\t\treturn aBenchmarkSide._groups && aBenchmarkSide._groups.some(aGroup => aGroup.dataIsAvailable === true);\r\n\t}\r\n\r\n\tfunction $$checkForNoData(anInstituteResponse){\r\n\t\t$$throwIfNotAnInstituteResponse(anInstituteResponse);\r\n\r\n\t\tconst numberOfBenchmarks = anInstituteResponse.length;\r\n\t\tconst isRunningAsFoundation = (numberOfBenchmarks === 1);\r\n\r\n\t\tconst benchmarkSideThatIsMissing = anInstituteResponse.filter( aBenchmarkSide => !hasSomeData(aBenchmarkSide) ) || [];\r\n\r\n\t\tif(isRunningAsFoundation) {\r\n\t\t\t// Check: Do we even need to show the warning at all?  Was there even aBenchmarkSide that was missing data?\r\n\t\t\tif (benchmarkSideThatIsMissing.length){\r\n\t\t\t\t// Okay, so at least one is missing. So, do we have to warn for both districts or just the one?\r\n\t\t\t\tif (benchmarkSideThatIsMissing.length === 1) {\r\n\t\t\t\t\tif(!benchmarkSideThatIsMissing[0]._parameters.name){\r\n\t\t\t\t\t\tthrow new Error('Since benchmarkSideThatIsMissing[0]._parameters.name was falsy, we can conclude that the Pact tests did not enforce that the backend must be supplying a name parameter');\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn 'We apologize, but there is no data for ' + benchmarkSideThatIsMissing[0]._parameters.name + ' at this time.';\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 'We apologize, but there is no data for one of the benchmarks at this time.';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// then we're probably in \"Central mode\" i.e. we're comparing two different benchmarks, so we ONLY want to throw a warning when both benchmarks have no data\r\n\t\t\tif(benchmarkSideThatIsMissing.length > 1){\r\n\t\t\t\treturn 'We apologize, but there is no data for either filter at this time. Please select a wider filter.';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction warningGuardConditions(anInstituteResponse){\r\n\t\treturn $$checkForBothTooSpecific(anInstituteResponse) || $$checkForNoData(anInstituteResponse);\r\n\t}\r\n\r\n\t// Ugly, but effective way to force this into the format needed for special KPIs\r\n\t// Descriptions of legendMapping, anInstituteResponse, otherOptions can be found in toGenericHighchartSeries\r\n\t/**\r\n\t * @param {Object} noDatesSeriesOverride- This is for KPIs that use categories for the xAxis (not dates) and not the legendName\r\n\t * @param {array} noDatesSeriesOverride.xAxisCategories - ordered array of custom categories for xAxis\r\n\t * @param {string} noDatesSeriesOverride.detailItemName - key in KPI within the detail item. Should be KPI name. If more than one, cannot use override\r\n\t * @param {string} noDatesSeriesOverride.isPercentage\r\n\t **/\r\n\tfunction getSeriesWithCustomXAxisCategories(noDatesSeriesOverride, legendMapping, anInstituteResponse, otherOptions){\r\n\r\n\t\tif(!noDatesSeriesOverride || !noDatesSeriesOverride.xAxisCategories || !noDatesSeriesOverride.detailItemName){\r\n\t\t\t$log.error('Missing information for overrideConfigWithCustomXAxisCategories');\r\n\t\t\treturn [];\r\n\t\t}\r\n\t\tconst customXAxisCategories = noDatesSeriesOverride.xAxisCategories;\r\n\t\tconst detailItemName = noDatesSeriesOverride.detailItemName;\r\n\r\n\t\tlet newSeries = toGenericHighchartSeries(legendMapping, anInstituteResponse, otherOptions);\r\n\r\n\t\tconst benchmarksWithData = anInstituteResponse.filter( benchmark => hasSomeData(benchmark));\r\n\r\n\t\tlet percentAdjuster = 1;\r\n\t\tnewSeries.forEach( (aSeries, seriesIndex) => {\r\n\t\t\tif(noDatesSeriesOverride.isPercentage){\r\n\t\t\t\tconst totalCount = customXAxisCategories.reduce((acc, category) => {\r\n\t\t\t\t\treturn acc + benchmarksWithData[seriesIndex]._groups[0].detail[detailItemName][category];\r\n\t\t\t\t}, 0);\r\n\t\t\t\tpercentAdjuster = (100/totalCount);\r\n\t\t\t}\r\n\t\t\taSeries.data = customXAxisCategories.reduce((acc, category) => {\r\n\t\t\t\tacc.push(benchmarksWithData[seriesIndex]._groups[0].detail[detailItemName][category] * percentAdjuster);\r\n\t\t\t\treturn acc;\r\n\t\t\t}, []);\r\n\t\t});\r\n\r\n\t\treturn newSeries;\r\n\t}\r\n\r\n\t// Ugly, but effective way to force this into the format needed for special KPIs\r\n\t// Descriptions of legendMapping, anInstituteResponse, otherOptions can be found in toGenericHighchartSeries\r\n\t/**\r\n\t * @param {Object} noDatesSeriesOverride- This is for KPIs that use categories for the xAxis (not dates) and not the legendName\r\n\t * @param {array} noDatesSeriesOverride.xAxisCategories - ordered array of custom categories for xAxis\r\n\t * @param {string} noDatesSeriesOverride.detailItemName - key in KPI within the detail item. Should be KPI name. If more than one, cannot use override\r\n\t * @param {string} noDatesSeriesOverride.isPercentage\r\n\t **/\r\n\tfunction getSparkChartSeriesWithCustomXAxisCategories(noDatesSeriesOverride, legendMapping, anInstituteResponse, otherOptions){\r\n\t\tif(!noDatesSeriesOverride || !noDatesSeriesOverride.xAxisCategories || !noDatesSeriesOverride.detailItemName){\r\n\t\t\t$log.error('Missing information for overrideConfigWithCustomXAxisCategories');\r\n\t\t\treturn [];\r\n\t\t}\r\n\t\tconst {xAxisCategories, detailItemNameSeries, detailSeriesKeyName, detailValueKeyName, detailXAxisKeyName, calculatePercentageFromTotals} = noDatesSeriesOverride;\r\n\t\tif(!ssDashboardColorsHlp.getOptions){\r\n\t\t\treturn $log.error('ssDashboardColorsHlp must have changed. It\\'s supposed to have a getOptions method.');\r\n\t\t}\r\n\t\t$$throwIfNotAnInstituteResponse(anInstituteResponse);\r\n\t\tconst ssDashboardColorsHlpOptionsArray = ssDashboardColorsHlp.getOptions();\r\n\r\n\t\tconst benchmarksThatWereWideEnough = anInstituteResponse.filter(aBenchmarkSide => aBenchmarkSide._insightResultCountExceedsMinimum === true);\r\n\r\n\t\tlet legendKeyValues = legendMapping.reduce( (acc, currentValue, currentIndex)=> {\r\n\t\t\tcurrentValue.from.forEach( (fromVal) => {\r\n\t\t\t\tacc[fromVal] = currentValue.to;\r\n\t\t\t});\r\n\t\t\treturn acc;\r\n\t\t}, {});\r\n\r\n\t\tlet arrayOfHighchartsSeriesObjects = [];\r\n\r\n\t\tconst transformedResponse =  detailToLegendRemap(benchmarksThatWereWideEnough, legendMapping);\r\n\r\n\t\ttransformedResponse.forEach(function (aBenchmarkSide, sideIndex) {\r\n\t\t\tif(!aBenchmarkSide._parameters.name){\r\n\t\t\t\treturn $log.error('Without requesting name with institute request, then we can\\'t map the benchmark name.');\r\n\t\t\t}\r\n\t\t\t// Don't display data for a benchmark side if the data for it is too specific to be statistically relevant\r\n\t\t\tconst filterIsTooSpecific = (aBenchmarkSide._insightResultCountExceedsMinimum === false);\r\n\t\t\t// Don't display data for a benchmark side if the data for it is completely unavailable\r\n\t\t\tconst hasAtLeastSomeData = hasSomeData(aBenchmarkSide);\r\n\t\t\tif(!filterIsTooSpecific && hasAtLeastSomeData) {\r\n\r\n\t\t\t\tconst benchmarkName = aBenchmarkSide._parameters.name;\r\n\t\t\t\tlet newSeriesElems;\r\n\t\t\t\tconst totalsForPercentages = {};\r\n\r\n\t\t\t\tconst seriesMapObj = Object.values(legendKeyValues).reduce( (acc, categoryName) => {\r\n\t\t\t\t\tacc[categoryName] = new Array(xAxisCategories.length);\r\n\t\t\t\t\tacc[categoryName].fill(0);\r\n\t\t\t\t\treturn acc;\r\n\t\t\t\t}, {});\r\n\r\n\t\t\t\tif(calculatePercentageFromTotals){\r\n\t\t\t\t\tObject.keys(legendKeyValues).forEach( (fromTitle) => {\r\n\t\t\t\t\t\ttotalsForPercentages[fromTitle]=0;\r\n\t\t\t\t\t});\r\n\t\t\t\t\taBenchmarkSide._groups[0].detail[detailItemNameSeries].forEach(function(_aResp){\r\n\t\t\t\t\t\ttotalsForPercentages[_aResp[detailSeriesKeyName]]+=_aResp[detailValueKeyName];\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\taBenchmarkSide._groups[0].detail[detailItemNameSeries].forEach(function(_aResp){\r\n\t\t\t\t\tconst categoryIndex = xAxisCategories.indexOf(_aResp[detailXAxisKeyName]);\r\n\t\t\t\t\tif(categoryIndex>=0){\r\n\t\t\t\t\t\tif(calculatePercentageFromTotals){\r\n\t\t\t\t\t\t\tseriesMapObj[legendKeyValues[_aResp[detailSeriesKeyName]]][categoryIndex] = _aResp[detailValueKeyName] / totalsForPercentages[_aResp[detailSeriesKeyName]] * 100;\r\n\t\t\t\t\t\t} else{\r\n\t\t\t\t\t\t\tseriesMapObj[legendKeyValues[_aResp[detailSeriesKeyName]]][categoryIndex] = _aResp[detailValueKeyName];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tnewSeriesElems = createASeries(benchmarkName, Object.values(legendKeyValues), seriesMapObj, ssDashboardColorsHlpOptionsArray, sideIndex, otherOptions);\r\n\t\t\t\tif(otherOptions && otherOptions.fillAreaUnderFirstLineTrend){\r\n\t\t\t\t\tif(sideIndex === 0) {\r\n\t\t\t\t\t\tnewSeriesElems.forEach(seriesObj => {\r\n\t\t\t\t\t\t\tseriesObj.fillOpacity=0.1;\r\n\t\t\t\t\t\t\tseriesObj.type = enumHighchartsTypes.area;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tarrayOfHighchartsSeriesObjects = arrayOfHighchartsSeriesObjects.concat(newSeriesElems);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn arrayOfHighchartsSeriesObjects;\r\n\t}\r\n\r\n}\r\n// #-- END Helper (ssInstituteInsightsHlp) --# //\r\n// #-----------------------------------------# //\r\n\r\nangular.module('super-suit-helpers').factory('ssInstituteInsightsHlp', ssInstituteInsightsHlp);\r\n","export class Component {\r\n\tconstructor(props, cmptName, config = {}) {\r\n\r\n\t\tthis.restrict = 'E';\r\n\t\tthis.replace = true;\r\n\t\tthis.scope = props;\r\n\t\tthis.templateUrl = `components/super-${cmptName}/${cmptName}.html`;\r\n\r\n\t\tObject.assign(this, config);\r\n\t}\r\n}\r\n"],"names":["ssViewMoreChartsHlp","$log","ssArrayHlp","ssMathHlp","ssInstituteInsightsHlp","ssHighchartsFactoryHlp","ssObjectHlp","moment","legendMapping","apiResults","viewMoreTrendsOptions","getMaxDataPoint","aSeriesArr","reduce","runningMaxNum","currentSeries","largestNumInDataArray","Math","data","averageMonthsWithData","seriesData","dataToUse","filter","percent","length","average","overrideMergedDataWithOtherApi","mergedDataSeriesArr","toGenericHighchartSeries","apiMergedDataOverride","seriesConfig","genericSeriesArr","map","rowChart","aSeriesElem","deepCopy","type","highchartType","mergedData","forEach","rowStat","name","stack","nullToZero","anArray","slice","aValueInTheArray","metricIsPercent","benchmarkTitles","yTitle","sortBySize","noDatesSeriesOverride","toISOString","getSparkChartSeriesWithCustomXAxisCategories","xAxisWithCategories","xAxisCategories","getXCategoriesFromResponse","seriesOfCharts","elem","sum","aSeriesArray","shouldSortBySize","legendToSeriesHashMap","groupBy","legendArray","getOrderedLegendNames","chartContainers","aLegendTitle","seriesSubset","error","primary","findWhere","comparison","skeletonOptions","tickPositioner","tickPositioners","percentageBy","maxY","unpopulatedListConfig","getBasicHighchartStructure","highchartConfig","Object","assign","xAxis","value","sort","a","b","sortByLegendThenPopulate","ssViewMoreTrendsHlp","overflowName","fillAreaUnderFirstLineTrend","seriesOfLines","bottomChartContainers","topChartContainers","chartsArray","topCharts","allRemainingChartsAsOne","splice","acc","curr","i","listOfNames","push","createTopCharts","ssViewMoreTrendsMashupHlp","chartApiResults","featuredApiResults","remappedFeaturedValues","detailToLegendRemap","benchmarkIndex","_parameters","_groups","legendKeyValues","ssDashboardColorsHlp","enumHighchartsTypes","anInstituteResponse","flattenAnyDetailNesting","detailObj","detail","keys","aKey","babelHelpers.typeof","Array","isArray","aSubDetailKey","hasOwnProperty","remapDetailsToLegend","newLegendObj","mapping","to","from","Error","mathMethod","aFromAttr","theRes","aBenchmarkSide","_aGroup","dataIsAvailable","flattenedDetail","otherOptions","arrayOfHighchartsSeriesObjects","getOptions","ssDashboardColorsHlpOptionsArray","benchmarksThatWereWideEnough","_insightResultCountExceedsMinimum","transformedResponse","orderedLegendNames","sideIndex","filterIsTooSpecific","hasAtLeastSomeData","hasSomeData","benchmarkName","newSeriesElems","pivotByDate","dateLegendHashMap","createDateToLegendHashMap","currentIsoDate","createASeries","legendToValueHashMap","createLegendToValueHashMap","fillOpacity","area","concat","getDateOffset","aLegendFromToPair","$$throwIfNotAnInstituteResponse","isAnInstituteResponse","theResponse","dateOffset","numPrevMonths","date","lastMonthToShow","subtract","completedMonth","effectiveStartDate","isAfter","aLegendName","dateKey","format","stackName","categoryToValuesHashMap","determineLightness","index","darkIsNext","determineWhetherToUsePatten","considerUsingPattern","groupColorsByBenchmark","groupLightnessByBenchmark","usePatternForAlternatingSeries","reverseLightness","numColorsToAdvance","alwaysShowFullLegend","colorArrayForThisSeries","aCategoryInLegend","indexInTheLegend","colorByNumberIndex","lightnessByNumberIndex","lightnessChoice","usePattern","getPatternedOptions","$$checkForBothTooSpecific","benchmarkSidesThatWereWideEnough","some","aGroup","$$checkForNoData","numberOfBenchmarks","benchmarkSideThatIsMissing","availableBenchmarks","oneBenchmarkSide","detailItemName","customXAxisCategories","newSeries","benchmarksWithData","benchmark","percentAdjuster","aSeries","seriesIndex","isPercentage","totalCount","category","detailItemNameSeries","detailSeriesKeyName","detailValueKeyName","detailXAxisKeyName","calculatePercentageFromTotals","currentValue","fromVal","totalsForPercentages","seriesMapObj","values","categoryName","fill","fromTitle","_aResp","categoryIndex","indexOf","max","Component","props","cmptName","config","restrict","replace","scope","templateUrl","angular","module","directive","FadedTrendsList","$scope","$anchorScroll","resetNumberOfCharts","chartsToShow","vm","numChartsWeInitiallyShowed","getMinDataPoint","removeZeros","dataArray","val","smallestNumInDataArray","min","initialPreviewNum","random","toString","go","uniqueId","$watch","newValue","$watchGroup","newValues","allSeries","seriesThatHaveData","every","aNum","chartType","enumHighchartsType","createStackToCharacterMapping","seriesWithDataFromNewToOld","stackMapping","seriesWithStackName","series","reverse","theMin","theMax","overrideMaxY","createsAPositionerFunction","charts","theGrouping","monthAndYear","split","monthOfSeries","yearOfSeries","indexOfSharedMonthAndYear","findIndex","aChart","firstWord","secondWord","trendHighchartConfig","SparklineStatusCard","sparklineArray","hideSparklineCharts","round","mainMetric","comparisonMetric","deltaAverage","Number","isFinite","factory","ViewMoreCharts","topChartConfig","apiMainResults","apiMoreResults","chartViewMoreOptions","createBottomChartContainer","ViewMoreTrends","createTopAndBottomChartContainers","ViewMoreTrendsMashup"],"mappings":"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"}